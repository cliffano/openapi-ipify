{-
   ipify

   OpenAPI client for ipify, a simple public IP address API

   OpenAPI Version: 3.0.0
   ipify API version: 0.9.0
   Contact: blah@cliffano.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Ipify.API.ApiDefault
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Ipify.API.ApiDefault where

import Ipify.Core
import Ipify.MimeTypes
import Ipify.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Default

-- *** getIp

-- | @GET \/@
-- 
-- Get your public IP address
-- 
getIp 
  :: Accept accept -- ^ request accept ('MimeType')
  -> IpifyRequest GetIp MimeNoContent A.Value accept
getIp  _ =
  _mkRequest "GET" ["/"]

data GetIp  

-- | /Optional Param/ "format" - Response format
instance HasOptionalParam GetIp Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "callback" - JSONP callback function name
instance HasOptionalParam GetIp Callback where
  applyOptionalParam req (Callback xs) =
    req `setQuery` toQuery ("callback", Just xs)

-- | @*/*@
instance MimeType mtype => Produces GetIp mtype

