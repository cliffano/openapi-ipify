/**
* openapi-ipify
* OpenAPI client for ipify, a simple public IP address API
*
* OpenAPI spec version: 0.9.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "DefaultApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

DefaultApi::DefaultApi(Pistache::Address addr)
    : httpEndpoint(addr)
{ };

void DefaultApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr)
        .flags(Pistache::Tcp::Options::InstallSignalHandler);
    httpEndpoint.init(opts);
    setupRoutes();
}

void DefaultApi::start() {
    httpEndpoint.setHandler(router.handler());
    httpEndpoint.serve();
}

void DefaultApi::shutdown() {
    httpEndpoint.shutdown();
}

void DefaultApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(router, base + "/", Routes::bind(&DefaultApi::get_ip_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&DefaultApi::default_api_default_handler, this));
}

void DefaultApi::get_ip_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto format = request.query().get("format");
    auto callback = request.query().get("callback");
    
    try {
      this->get_ip(format, callback, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void DefaultApi::default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

