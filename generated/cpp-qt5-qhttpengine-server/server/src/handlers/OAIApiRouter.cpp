/**
 * ipify
 * OpenAPI client for ipify, a simple public IP address API
 *
 * OpenAPI spec version: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QRegularExpression>

#include "OAIApiRouter.h"
#include "OAIDefaultApiRequest.h"


namespace OpenAPI {

inline QHttpEngine::Socket::Method toQHttpEngineMethod(QString method){

    if( method == QString("OPTIONS"))
        return QHttpEngine::Socket::Method::OPTIONS;
    if( method == QString("GET"))
        return QHttpEngine::Socket::Method::GET;
    if( method == QString("HEAD"))
        return QHttpEngine::Socket::Method::HEAD;
    if( method == QString("POST"))
        return QHttpEngine::Socket::Method::POST;
    if( method == QString("PUT"))
        return QHttpEngine::Socket::Method::PUT;
    if( method == QString("DELETE"))
        return QHttpEngine::Socket::Method::DELETE;
    if( method == QString("TRACE"))
        return QHttpEngine::Socket::Method::TRACE;
    if( method == QString("CONNECT"))
        return QHttpEngine::Socket::Method::CONNECT;

     return static_cast<QHttpEngine::Socket::Method>(-1);
}

ApiRouter::ApiRouter() {    
    OAIDefaultApiApiHandler = new OAIDefaultApiHandler();
     
}

ApiRouter::~ApiRouter(){
    qDebug() << "~ApiRouter()";    
    delete OAIDefaultApiApiHandler;
         
}

void ApiRouter::setUpRoutes() {
    
    Routes.insert("/",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAIDefaultApiRequest(socket, OAIDefaultApiApiHandler);
            reqObj->getIpRequest();
        }
    }); 
}

void ApiRouter::processRequest(QHttpEngine::Socket *socket){
    if (Routes.contains(socket->path())) {
        for(auto endpoints : Routes.values(socket->path())) {
            endpoints.operator()(socket);
        }
    } else
    {  
    }
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
    return;
}
}
